const mockEvent = { 'body': JSON.stringify({ 'prompt': 'Hello world', 'parameters': { 'max_new_tokens': 256, 'temperature': 0.1 } }) }; const mockContext = {}; const mockResponse = { 'Body': { 'read': () => JSON.stringify({ 'result': 'Hello world response' }) } }; const mockInvokeEndpoint = jest.fn().mockResolvedValue(mockResponse); const mockSMRClient = { 'invoke_endpoint': mockInvokeEndpoint }; const lambdaHandler = require('./notebook/lambda_function').lambda_handler; jest.mock('boto3', () => ({ 'client': () => mockSMRClient })); test('lambda_handler with valid input', async () => { const result = await lambdaHandler(mockEvent, mockContext); expect(result).toEqual({ 'statusCode': 200, 'body': JSON.stringify({ 'result': 'Hello world response' }) }); expect(mockInvokeEndpoint).toHaveBeenCalledWith({ 'EndpointName': process.env.SAGEMAKER_ENDPOINT_NAME, 'Body': JSON.stringify({ 'inputs': 'Hello world', 'parameters': { 'max_new_tokens': 256, 'temperature': 0.1 } }), 'ContentType': 'application/json' }); });

const mockEvent = { 'body': JSON.stringify({ 'parameters': { 'max_new_tokens': 256, 'temperature': 0.1 } }) }; const mockContext = {}; const lambdaHandler = require('./notebook/lambda_function').lambda_handler; test('lambda_handler with missing prompt', async () => { const result = await lambdaHandler(mockEvent, mockContext); expect(result).toEqual({ 'statusCode': 200, 'body': JSON.stringify({ 'result': '' }) }); });

const mockEvent = { 'body': 'invalid_json' }; const mockContext = {}; const lambdaHandler = require('./notebook/lambda_function').lambda_handler; test('lambda_handler with invalid JSON input', async () => { const result = await lambdaHandler(mockEvent, mockContext); expect(result).toEqual({ 'statusCode': 400, 'body': JSON.stringify({ 'error': 'Invalid input' }) }); });

