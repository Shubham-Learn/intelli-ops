const mockSMRClient = { invoke_endpoint: jest.fn() }; const mockEvent = { body: JSON.stringify({ prompt: 'Hello', parameters: { max_new_tokens: 256, temperature: 0.1 } }) }; const mockContext = {}; const mockResponse = { Body: { read: () => JSON.stringify({ result: 'Hello, world!' }) } }; mockSMRClient.invoke_endpoint.mockResolvedValue(mockResponse); const lambdaHandler = require('./notebook/lambda_function'); lambdaHandler.lambda_handler(mockEvent, mockContext).then((result) => { expect(result.body).toEqual(JSON.stringify({ result: 'Hello, world!' })); expect(mockSMRClient.invoke_endpoint).toHaveBeenCalledWith({ EndpointName: process.env.SAGEMAKER_ENDPOINT_NAME, Body: JSON.stringify({ inputs: 'Hello', parameters: { max_new_tokens: 256, temperature: 0.1 } }), ContentType: 'application/json' }); });

const mockSMRClient = { invoke_endpoint: jest.fn() }; const mockEvent = { body: JSON.stringify({ parameters: { max_new_tokens: 256, temperature: 0.1 } }) }; const mockContext = {}; const mockResponse = { Body: { read: () => JSON.stringify({ result: 'Hello, world!' }) } }; mockSMRClient.invoke_endpoint.mockResolvedValue(mockResponse); const lambdaHandler = require('./notebook/lambda_function'); lambdaHandler.lambda_handler(mockEvent, mockContext).then((result) => { expect(result.body).toEqual(JSON.stringify({ result: 'Hello, world!' })); expect(mockSMRClient.invoke_endpoint).toHaveBeenCalledWith({ EndpointName: process.env.SAGEMAKER_ENDPOINT_NAME, Body: JSON.stringify({ inputs: '', parameters: { max_new_tokens: 256, temperature: 0.1 } }), ContentType: 'application/json' }); });

const mockSMRClient = { invoke_endpoint: jest.fn() }; const mockEvent = { body: 'invalid' }; const mockContext = {}; const lambdaHandler = require('./notebook/lambda_function'); try { await lambdaHandler.lambda_handler(mockEvent, mockContext); } catch (error) { expect(error).toBeInstanceOf(Error); expect(error.message).toContain('Unexpected token'); }